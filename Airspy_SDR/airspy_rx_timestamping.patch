From b3dc4c43e8ec9c7c19ed80b0161f8d3a62b45e15 Mon Sep 17 00:00:00 2001
From: Laurence Blaxter <Laurence.blaxter@btinternet.com>
Date: Tue, 3 Jan 2017 15:45:37 +0000
Subject: [PATCH 1/2] Added support for a new airspy_rx mode6, 4 channel wav
 with system timestamping across channels 3 and 4

---
 airspy-tools/src/airspy_rx.c | 29 ++++++++++++++++++++++++++---
 1 file changed, 26 insertions(+), 3 deletions(-)

diff --git a/airspy-tools/src/airspy_rx.c b/airspy-tools/src/airspy_rx.c
index 1cea6d3..a2a3b69 100644
--- a/airspy-tools/src/airspy_rx.c
+++ b/airspy-tools/src/airspy_rx.c
@@ -251,6 +251,8 @@ uint32_t biast_val;
 bool serial_number = false;
 uint64_t serial_number_val;
 
+bool time_channels = false;
+
 static float
 TimevalDiff(const struct timeval *a, const struct timeval *b)
 {
@@ -366,6 +368,14 @@ int rx_callback(airspy_transfer_t* transfer)
 	ssize_t bytes_written;
 	struct timeval time_now;
 	float time_difference, rate;
+	uint32_t nanoseconds;	/* Time in nanoseconds for timestamps */
+
+	if(time_channels)
+	{
+		timespec ts;
+		timespec_get( &ts, TIME_UTC);/* System time as UTC, seconds and nanoseconds */
+		nanoseconds=got_first_packet?ts.tv_nsec:ts.tv_sec;/* Long int to unsigned 32 bit, ok as always less than 1 billion. First sample is int seconds */
+	}
 
 	if( fd != NULL ) 
 	{
@@ -453,6 +463,15 @@ int rx_callback(airspy_transfer_t* transfer)
 		{
 			bytes_written = 0;
 		}
+		//Write two 16 bit integers here for the timestamps (if enabled)
+		if(time_channels)
+		{
+			if(fwrite((const void *)&nanoseconds, 1, 4, fd)!=4)
+			{
+				bytes_written = bytes_to_write-1; /* Cause an error */
+			}
+		}
+
 		if ( (bytes_written != bytes_to_write) || 
 				 ((limit_num_samples == true) && (bytes_to_xfer == 0)) 
 				)
@@ -479,7 +498,7 @@ static void usage(void)
 		FREQ_HZ_MIN / FREQ_ONE_MHZ, FREQ_HZ_MAX / FREQ_ONE_MHZ, DEFAULT_FREQ_HZ / FREQ_ONE_MHZ);
 	printf("[-a sample_rate]: Set sample rate\n");
 	printf("[-t sample_type]: Set sample type, \n");
-	printf(" 0=FLOAT32_IQ, 1=FLOAT32_REAL, 2=INT16_IQ(default), 3=INT16_REAL, 4=U16_REAL, 5=RAW\n");
+	printf(" 0=FLOAT32_IQ, 1=FLOAT32_REAL, 2=INT16_IQ(default), 3=INT16_REAL, 4=U16_REAL, 5=RAW, 6=INT16_IQ, time\n");
 	printf("[-b biast]: Set Bias Tee, 1=enabled, 0=disabled(default)\n");
 	printf("[-v vga_gain]: Set VGA/IF gain, 0-%d (default %d)\n", VGA_GAIN_MAX, vga_gain);
 	printf("[-m mixer_gain]: Set Mixer gain, 0-%d (default %d)\n", MIXER_GAIN_MAX, mixer_gain);
@@ -609,10 +628,14 @@ int main(int argc, char** argv)
 						wav_nb_byte_per_sample = (wav_nb_bits_per_sample / 8);
 					break;
 
+					case 6:
+						time_channels = true; /* Otherwise the same as int16 */
+						sample_type_u32 = 2; /* Switch the case to type 2 */
+
 					case 2:
 						sample_type_val = AIRSPY_SAMPLE_INT16_IQ;
 						wav_format_tag = 1; /* PCM8 or PCM16 */
-						wav_nb_channels = 2;
+						wav_nb_channels = time_channels?4:2; /* There are 4 channels with time mode, nanoseconds packed into second 2 */
 						wav_nb_bits_per_sample = 16;
 						wav_nb_byte_per_sample = (wav_nb_bits_per_sample / 8);
 					break;
@@ -700,7 +723,7 @@ int main(int argc, char** argv)
 		sample_rate_val = sample_rate_u32;
 	}
 
-	bytes_to_xfer = samples_to_xfer * wav_nb_bits_per_sample * wav_nb_channels / 8;
+	bytes_to_xfer = samples_to_xfer * wav_nb_bits_per_sample * wav_nb_channels / (time_channels?16:8);
 
 	if (samples_to_xfer >= SAMPLES_TO_XFER_MAX_U64) {
 		printf("argument error: num_samples must be less than %s/%sMio\n",
-- 
2.3.7


From f650cb37eadb4e661bf192a740127520a2bd29da Mon Sep 17 00:00:00 2001
From: Laurence Blaxter <Laurence.blaxter@btinternet.com>
Date: Fri, 6 Jan 2017 13:30:06 +0000
Subject: [PATCH 2/2] Buffix and testing completed

---
 airspy-tools/src/airspy_rx.c | 129 +++++++++++++++++++++++--------------------
 1 file changed, 69 insertions(+), 60 deletions(-)

diff --git a/airspy-tools/src/airspy_rx.c b/airspy-tools/src/airspy_rx.c
index a2a3b69..f9c4058 100644
--- a/airspy-tools/src/airspy_rx.c
+++ b/airspy-tools/src/airspy_rx.c
@@ -123,11 +123,11 @@ int gettimeofday(struct timeval *tv, void* ignored)
 #define MIN_SAMPLERATE_BY_VALUE (1000000)
 
 /* WAVE or RIFF WAVE file format containing data for AirSpy compatible with SDR# Wav IQ file */
-typedef struct 
+typedef struct
 {
-		char groupID[4]; /* 'RIFF' */
-		uint32_t size; /* File size + 8bytes */
-		char riffType[4]; /* 'WAVE'*/
+	char groupID[4]; /* 'RIFF' */
+	uint32_t size; /* File size + 8bytes */
+	char riffType[4]; /* 'WAVE'*/
 } t_WAVRIFF_hdr;
 
 #define FormatID "fmt "   /* chunkID for Format Chunk. NOTE: There is a space at the end of this ID. */
@@ -144,10 +144,10 @@ typedef struct {
 	uint16_t wBitsPerSample;
 } t_FormatChunk;
 
-typedef struct 
+typedef struct
 {
-		char chunkID[4]; /* 'data' */
-		uint32_t chunkSize; /* Size of data in bytes */
+	char chunkID[4]; /* 'data' */
+	uint32_t chunkSize; /* Size of data in bytes */
 	/* For IQ samples I(16 or 32bits) then Q(16 or 32bits), I, Q ... */
 } t_DataChunk;
 
@@ -158,7 +158,7 @@ typedef struct
 	t_DataChunk data_chunk;
 } t_wav_file_hdr;
 
-t_wav_file_hdr wave_file_hdr = 
+t_wav_file_hdr wave_file_hdr =
 {
 	/* t_WAVRIFF_hdr */
 	{
@@ -185,9 +185,9 @@ t_wav_file_hdr wave_file_hdr =
 };
 
 #define U64TOA_MAX_DIGIT (31)
-typedef struct 
+typedef struct
 {
-		char data[U64TOA_MAX_DIGIT+1];
+	char data[U64TOA_MAX_DIGIT+1];
 } t_u64toa;
 
 receiver_mode_t receiver_mode = RECEIVER_MODE_RX;
@@ -228,7 +228,7 @@ float global_average_rate = 0.0f;
 uint32_t rate_samples = 0;
 uint32_t buffer_count = 0;
 uint32_t sample_count = 0;
-	
+   
 bool freq = false;
 uint32_t freq_hz;
 
@@ -369,15 +369,15 @@ int rx_callback(airspy_transfer_t* transfer)
 	struct timeval time_now;
 	float time_difference, rate;
 	uint32_t nanoseconds;	/* Time in nanoseconds for timestamps */
+	struct timespec ts;
 
 	if(time_channels)
 	{
-		timespec ts;
-		timespec_get( &ts, TIME_UTC);/* System time as UTC, seconds and nanoseconds */
-		nanoseconds=got_first_packet?ts.tv_nsec:ts.tv_sec;/* Long int to unsigned 32 bit, ok as always less than 1 billion. First sample is int seconds */
+		//timespec_get( &ts, TIME_UTC);/* System time as UTC, seconds and nanoseconds */
+		clock_gettime(CLOCK_REALTIME, &ts);
 	}
 
-	if( fd != NULL ) 
+	if( fd != NULL )
 	{
 		switch(sample_type_val)
 		{
@@ -430,7 +430,6 @@ int rx_callback(airspy_transfer_t* transfer)
 		{
 			t_start = time_now;
 			time_start = time_now;
-			got_first_packet = true;
 		}
 		else
 		{
@@ -458,23 +457,38 @@ int rx_callback(airspy_transfer_t* transfer)
 
 		if(pt_rx_buffer != NULL)
 		{
-			bytes_written = fwrite(pt_rx_buffer, 1, bytes_to_write, fd);
+			if(time_channels)
+			{
+				bytes_written=0;
+				uint32_t rx=bytes_to_write;
+				while(rx>=4)
+				{
+					bytes_written += fwrite(pt_rx_buffer, 1, 4, fd);
+					rx-=4;
+					pt_rx_buffer+=4;
+					if(!got_first_packet) 
+					{
+						got_first_packet=true;
+						nanoseconds=ts.tv_sec;
+					} else /* The first sample is the integer seconds, nanosecs after that */
+					{
+						nanoseconds=ts.tv_nsec;
+					}					
+					if(fwrite((const void *)&nanoseconds, 1, 4, fd)!=4)/* Two 16 bit ints */
+					{
+						bytes_written--; /* Cause an error */
+					}
+				}
+			}else
+			{
+				bytes_written = fwrite(pt_rx_buffer, 1, bytes_to_write, fd);
+			}
 		}else
 		{
 			bytes_written = 0;
 		}
-		//Write two 16 bit integers here for the timestamps (if enabled)
-		if(time_channels)
-		{
-			if(fwrite((const void *)&nanoseconds, 1, 4, fd)!=4)
-			{
-				bytes_written = bytes_to_write-1; /* Cause an error */
-			}
-		}
 
-		if ( (bytes_written != bytes_to_write) || 
-				 ((limit_num_samples == true) && (bytes_to_xfer == 0)) 
-				)
+		if ( (bytes_written != bytes_to_write) || ((limit_num_samples == true) && (bytes_to_xfer == 0)) )
 			return -1;
 		else
 			return 0;
@@ -494,11 +508,10 @@ static void usage(void)
 	printf("[-s serial_number_64bits]: Open device with specified 64bits serial number\n");
 	printf("[-p packing]: Set packing for samples, \n");
 	printf(" 1=enabled(12bits packed), 0=disabled(default 16bits not packed)\n");
-	printf("[-f frequency_MHz]: Set frequency in MHz between [%lu, %lu] (default %luMHz)\n",
-		FREQ_HZ_MIN / FREQ_ONE_MHZ, FREQ_HZ_MAX / FREQ_ONE_MHZ, DEFAULT_FREQ_HZ / FREQ_ONE_MHZ);
+	printf("[-f frequency_MHz]: Set frequency in MHz between [%lu, %lu] (default %luMHz)\n",FREQ_HZ_MIN / FREQ_ONE_MHZ, FREQ_HZ_MAX / FREQ_ONE_MHZ, DEFAULT_FREQ_HZ / FREQ_ONE_MHZ);
 	printf("[-a sample_rate]: Set sample rate\n");
 	printf("[-t sample_type]: Set sample type, \n");
-	printf(" 0=FLOAT32_IQ, 1=FLOAT32_REAL, 2=INT16_IQ(default), 3=INT16_REAL, 4=U16_REAL, 5=RAW, 6=INT16_IQ, time\n");
+	printf(" 0=FLOAT32_IQ, 1=FLOAT32_REAL, 2=INT16_IQ(default), 3=INT16_REAL, 4=U16_REAL, 5=RAW, 6=INT16_IQ with time\n");
 	printf("[-b biast]: Set Bias Tee, 1=enabled, 0=disabled(default)\n");
 	printf("[-v vga_gain]: Set VGA/IF gain, 0-%d (default %d)\n", VGA_GAIN_MAX, vga_gain);
 	printf("[-m mixer_gain]: Set Mixer gain, 0-%d (default %d)\n", MIXER_GAIN_MAX, mixer_gain);
@@ -523,7 +536,7 @@ sighandler(int signum)
 	return FALSE;
 }
 #else
-void sigint_callback_handler(int signum) 
+void sigint_callback_handler(int signum)
 {
 	fprintf(stdout, "Caught signal %d\n", signum);
 	do_exit = true;
@@ -560,7 +573,7 @@ int main(int argc, char** argv)
 	while( (opt = getopt(argc, argv, "r:ws:p:f:a:t:b:v:m:l:g:h:n:d")) != EOF )
 	{
 		result = AIRSPY_SUCCESS;
-		switch( opt ) 
+		switch( opt )
 		{
 			case 'r':
 				receive = true;
@@ -688,7 +701,7 @@ int main(int argc, char** argv)
 
 			case 'g':
 				linearity_gain = true;
-				result = parse_u32(optarg, &linearity_gain_val);		
+				result = parse_u32(optarg, &linearity_gain_val);	   
 			break;
 
 			case 'h':
@@ -710,12 +723,12 @@ int main(int argc, char** argv)
 				usage();
 				return EXIT_FAILURE;
 		}
-		
+	   
 		if( result != AIRSPY_SUCCESS ) {
 			printf("argument error: '-%c %s' %s (%d)\n", opt, optarg, airspy_error_name(result), result);
 			usage();
 			return EXIT_FAILURE;
-		}		
+		}	   
 	}
 
 	if (sample_rate)
@@ -736,8 +749,7 @@ int main(int argc, char** argv)
 	if( freq ) {
 		if( (freq_hz >= FREQ_HZ_MAX) || (freq_hz < FREQ_HZ_MIN) )
 		{
-			printf("argument error: frequency_MHz=%.6f MHz and shall be between [%lu, %lu[ MHz\n",
-							((double)freq_hz/(double)FREQ_ONE_MHZ), FREQ_HZ_MIN/FREQ_ONE_MHZ, FREQ_HZ_MAX/FREQ_ONE_MHZ);
+			printf("argument error: frequency_MHz=%.6f MHz and shall be between [%lu, %lu[ MHz\n",((double)freq_hz/(double)FREQ_ONE_MHZ), FREQ_HZ_MIN/FREQ_ONE_MHZ, FREQ_HZ_MAX/FREQ_ONE_MHZ);
 			usage();
 			return EXIT_FAILURE;
 		}
@@ -748,7 +760,7 @@ int main(int argc, char** argv)
 	}
 
 	receiver_mode = RECEIVER_MODE_RX;
-	if( receive_wav ) 
+	if( receive_wav )
 	{
 		if (sample_type_val == AIRSPY_SAMPLE_RAW)
 		{
@@ -765,7 +777,7 @@ int main(int argc, char** argv)
 		snprintf(path_file, PATH_FILE_MAX_LEN, "AirSpy_%sZ_%ukHz_IQ.wav", date_time, (uint32_t)(freq_hz/(1000ull)) );
 		path = path_file;
 		printf("Receive wav file: %s\n", path);
-	}	
+	}   
 
 	if( path == NULL ) {
 		printf("error: you shall specify at least -r <with filename> or -w option\n");
@@ -862,9 +874,7 @@ int main(int argc, char** argv)
 		}
 
 		if( limit_num_samples ) {
-			printf("num_samples -n %s (%sM)\n",
-							u64toa(samples_to_xfer, &ascii_u64_data1),
-							u64toa((samples_to_xfer/FREQ_ONE_MHZ), &ascii_u64_data2));
+			printf("num_samples -n %s (%sM)\n",u64toa(samples_to_xfer, &ascii_u64_data1),u64toa((samples_to_xfer/FREQ_ONE_MHZ), &ascii_u64_data2));
 		}
 	}
 
@@ -939,11 +949,10 @@ int main(int argc, char** argv)
 	{
 		printf("sample_rate -a %d (%f MSPS %s)\n", sample_rate_val, wav_sample_per_sec * 0.000001f, wav_nb_channels == 1 ? "Real" : "IQ");
 	}
-	
+   
 	result = airspy_board_partid_serialno_read(device, &read_partid_serialno);
 	if (result != AIRSPY_SUCCESS) {
-			fprintf(stderr, "airspy_board_partid_serialno_read() failed: %s (%d)\n",
-				airspy_error_name(result), result);
+			fprintf(stderr, "airspy_board_partid_serialno_read() failed: %s (%d)\n",airspy_error_name(result), result);
 			airspy_close(device);
 			airspy_exit();
 			return EXIT_FAILURE;
@@ -986,13 +995,13 @@ int main(int argc, char** argv)
 		airspy_exit();
 		return EXIT_FAILURE;
 	}
-	
+   
 	/* Write Wav header */
-	if( receive_wav ) 
+	if( receive_wav )
 	{
 		fwrite(&wave_file_hdr, 1, sizeof(t_wav_file_hdr), fd);
 	}
-	
+   
 #ifdef _MSC_VER
 	SetConsoleCtrlHandler( (PHANDLER_ROUTINE) sighandler, TRUE );
 #else
@@ -1073,15 +1082,15 @@ int main(int argc, char** argv)
 		else
 			sleep(1);
 	}
-	
-	result = airspy_is_streaming(device);	
+   
+	result = airspy_is_streaming(device);   
 	if (do_exit)
 	{
 		printf("\nUser cancel, exiting...\n");
 	} else {
 		printf("\nExiting...\n");
 	}
-	
+   
 	gettimeofday(&t_end, NULL);
 	time_diff = TimevalDiff(&t_end, &t_start);
 	printf("Total time: %5.4f s\n", time_diff);
@@ -1089,7 +1098,7 @@ int main(int argc, char** argv)
 	{
 		printf("Average speed %2.4f MSPS %s\n", (global_average_rate * 1e-6f / rate_samples), (wav_nb_channels == 2 ? "IQ" : "Real"));
 	}
-	
+   
 	if(device != NULL)
 	{
 		result = airspy_stop_rx(device);
@@ -1098,17 +1107,17 @@ int main(int argc, char** argv)
 		}
 
 		result = airspy_close(device);
-		if( result != AIRSPY_SUCCESS ) 
+		if( result != AIRSPY_SUCCESS )
 		{
 			printf("airspy_close() failed: %s (%d)\n", airspy_error_name(result), result);
 		}
-		
+	   
 		airspy_exit();
 	}
-		
+	   
 	if(fd != NULL)
 	{
-		if( receive_wav ) 
+		if( receive_wav )
 		{
 			/* Get size of file */
 			file_pos = ftell(fd);
@@ -1118,7 +1127,7 @@ int main(int argc, char** argv)
 			wave_file_hdr.fmt_chunk.wFormatTag = wav_format_tag;
 			wave_file_hdr.fmt_chunk.wChannels = wav_nb_channels;
 			wave_file_hdr.fmt_chunk.dwSamplesPerSec = wav_sample_per_sec;
-			wave_file_hdr.fmt_chunk.dwAvgBytesPerSec = wave_file_hdr.fmt_chunk.dwSamplesPerSec * wav_nb_byte_per_sample;
+			wave_file_hdr.fmt_chunk.dwAvgBytesPerSec = wave_file_hdr.fmt_chunk.dwSamplesPerSec * wav_nb_byte_per_sample * wav_nb_channels;
 			wave_file_hdr.fmt_chunk.wBlockAlign = wav_nb_channels * (wav_nb_bits_per_sample / 8);
 			wave_file_hdr.fmt_chunk.wBitsPerSample = wav_nb_bits_per_sample;
 			/* Wav Data Chunk */
@@ -1126,10 +1135,10 @@ int main(int argc, char** argv)
 			/* Overwrite header with updated data */
 			rewind(fd);
 			fwrite(&wave_file_hdr, 1, sizeof(t_wav_file_hdr), fd);
-		}	
+		}   
 		fclose(fd);
 		fd = NULL;
 	}
 	printf("done\n");
 	return exit_code;
-}
+} 
-- 
2.3.7

